datasource db {
    url      = env("DATABASE_URL")
    provider = "mongodb"
}

generator client {
    provider = "prisma-client-js"
}

// Food Items
model menuItems {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    price     Float
    image     String
    CartItems CartItems[]

    @@map("menuItems")
}

// Cart
model Cart {
    id        String      @id @default(auto()) @map("_id") @db.ObjectId
    CartItems CartItems[]
    userId    String?     @db.ObjectId
    user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    @@map("cart")
}

// CartItems
model CartItems {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    ItemId   String    @db.ObjectId
    Item     menuItems @relation(fields: [ItemId], references: [id], onDelete: Cascade)
    quantity Int
    cartId   String    @db.ObjectId
    cart     Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)

    @@map("cartitems")
}

// NextAuth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Cart          Cart[]

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
